{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERROR, GET_BACKLOG, GET_PROJECTS_TASKS, DELETE_PROJECT_TASKS } from \"./types\";\nexport const addProjectTask = (backlog_id, project_task, history) => async dispatch => {\n  try {\n    const res = await axios.post(`/api/backlog/${backlog_id}`, project_task);\n    history.push(`/projectBoard/${backlog_id}`);\n    dispatch({\n      type: GET_ERROR,\n      payload: {}\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERROR,\n      payload: error.response.data\n    });\n  }\n};\nexport const getBacklog = backlog_id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/backlog/${backlog_id}`);\n    dispatch({\n      type: GET_BACKLOG,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERROR,\n      payload: error.response.data\n    });\n  }\n};\nexport const getProjectTask = (backlog_id, pt_id, history) => async dispatch => {\n  try {\n    const res = await axios.get(`/api/backlog/${backlog_id}/${pt_id}`);\n    dispatch({\n      type: GET_PROJECTS_TASKS,\n      payload: res.data\n    });\n  } catch (error) {\n    history.push(\"/dashboard\");\n  }\n};\nexport const updateProjectTask = (backlog_id, pt_id, project_task, history) => async dispatch => {\n  try {\n    await axios.patch(`/api/backlog/${backlog_id}/${pt_id}`, project_task);\n    history.push(`/projectBoard/${backlog_id}`);\n    dispatch({\n      type: GET_ERROR,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERROR,\n      payload: err.response.data\n    });\n  }\n};\nexport const deleteProjectTask = (backlog_id, pt_id) => async dispatch => {\n  if (window.confirm(`Please confirm you are deleting project task ${pt_id}`)) {\n    await axios.delete(`/api/backlog/${backlog_id}/${pt_id}`);\n  }\n\n  dispatch({\n    type: DELETE_PROJECT_TASKS,\n    payload: pt_id\n  });\n};","map":{"version":3,"sources":["/Users/yuchenxu/Desktop/ProjectManamentTool/ppmtoolReact+Redux copy/src/actions/backlogAction.js"],"names":["axios","GET_ERROR","GET_BACKLOG","GET_PROJECTS_TASKS","DELETE_PROJECT_TASKS","addProjectTask","backlog_id","project_task","history","dispatch","res","post","push","type","payload","error","response","data","getBacklog","get","getProjectTask","pt_id","updateProjectTask","patch","err","deleteProjectTask","window","confirm","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport {GET_ERROR, GET_BACKLOG, GET_PROJECTS_TASKS,DELETE_PROJECT_TASKS } from \"./types\";\n\nexport const addProjectTask = (backlog_id, project_task, history) => async dispatch => {\n    try {\n        const res = await axios.post\n        (`/api/backlog/${backlog_id}`, project_task);\n        history.push(`/projectBoard/${backlog_id}`);\n        dispatch({\n            type:GET_ERROR,\n            payload: {}\n        });\n    } catch (error) {\n        dispatch({\n            type:GET_ERROR,\n            payload:error.response.data\n            }\n        );\n    }\n};\n\nexport const getBacklog = backlog_id => async dispatch => {\n    try {\n      const res = await axios.get(`/api/backlog/${backlog_id}`);\n      dispatch({\n        type: GET_BACKLOG,\n        payload: res.data\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_ERROR,\n        payload: error.response.data\n      });\n    }\n  };\n  export const getProjectTask = (\n    backlog_id,\n    pt_id,\n    history\n  ) => async dispatch => {\n    try {\n      const res = await axios.get(`/api/backlog/${backlog_id}/${pt_id}`);\n      dispatch({\n        type: GET_PROJECTS_TASKS,\n        payload: res.data\n      });\n    } catch (error) {\n      history.push(\"/dashboard\");\n    }\n  };\n  \n  export const updateProjectTask = (\n    backlog_id,\n    pt_id,\n    project_task,\n    history\n  ) => async dispatch => {\n    try {\n      await axios.patch(`/api/backlog/${backlog_id}/${pt_id}`, project_task);\n      history.push(`/projectBoard/${backlog_id}`);\n      dispatch({\n        type: GET_ERROR,\n        payload: {}\n      });\n    } catch (err) {\n      dispatch({\n        type: GET_ERROR,\n        payload: err.response.data\n      });\n    }\n  };\n\n  export const deleteProjectTask = (\n    backlog_id,\n    pt_id) => async dispatch => {\n        if(window.confirm(`Please confirm you are deleting project task ${pt_id}`)){\n            await axios.delete(`/api/backlog/${backlog_id}/${pt_id}`);\n        }\n        dispatch({\n            type: DELETE_PROJECT_TASKS,\n            payload: pt_id\n          });\n\n  }"]},"metadata":{},"sourceType":"module"}