{"ast":null,"code":"var _jsxFileName = \"/Users/yuchenxu/Desktop/ProjectManamentTool/ppmtoolReact+Redux copy/src/Components/ProjectBoard/ProjectBoard.js\";\nimport React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport Backlog from './Backlog';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport { getBacklog } from \"../../actions/backlogAction\";\n\nclass ProjectBoard extends Component {\n  //constructor to handle errors\n  constructor() {\n    super();\n    this.state = {\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.props.getBacklog(id);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  render() {\n    const {\n      id\n    } = this.props.match.params;\n    const {\n      project_tasks\n    } = this.props.backlog;\n    const {\n      errors\n    } = this.state;\n    let BoardContent;\n\n    const boardAlgorithm = (errors, project_tasks) => {\n      if (project_tasks.length < 1) {\n        if (errors.projectNotFound) {\n          return React.createElement(\"div\", {\n            className: \"alert alert-danger text-center\",\n            role: \"alert\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39\n            },\n            __self: this\n          }, errors.projectNotFound);\n        } else {\n          return React.createElement(\"div\", {\n            className: \"alert alert-info text-center\",\n            role: \"alert\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45\n            },\n            __self: this\n          }, \"No Project Tasks on this board\");\n        }\n      } else {\n        return React.createElement(Backlog, {\n          project_tasks_prop: project_tasks,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        });\n      }\n    };\n\n    BoardContent = boardAlgorithm(errors, project_tasks);\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: `/addProjectTask/${id}`,\n      className: \"btn btn-primary mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-plus-circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \" Create Project Task\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), BoardContent);\n  }\n\n}\n\nProjectBoard.propTypes = {\n  backlog: PropTypes.object.isRequired,\n  getBacklog: PropTypes.func.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  backlog: state.backlog,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  getBacklog\n})(ProjectBoard);","map":{"version":3,"sources":["/Users/yuchenxu/Desktop/ProjectManamentTool/ppmtoolReact+Redux copy/src/Components/ProjectBoard/ProjectBoard.js"],"names":["React","Component","Link","Backlog","connect","PropTypes","getBacklog","ProjectBoard","constructor","state","errors","componentDidMount","id","props","match","params","componentWillReceiveProps","nextProps","setState","render","project_tasks","backlog","BoardContent","boardAlgorithm","length","projectNotFound","propTypes","object","isRequired","func","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,6BAA3B;;AAEA,MAAMC,YAAN,SAA2BN,SAA3B,CAAqC;AACjC;AACAO,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE;AADG,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAS,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAhC;AACA,SAAKF,KAAL,CAAWP,UAAX,CAAsBM,EAAtB;AACD;;AAEDI,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC,QAAIA,SAAS,CAACP,MAAd,EAAsB;AACpB,WAAKQ,QAAL,CAAc;AAAER,QAAAA,MAAM,EAAEO,SAAS,CAACP;AAApB,OAAd;AACD;AACF;;AAEDS,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA;AAAF,QAAS,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAhC;AACA,UAAM;AAAEK,MAAAA;AAAF,QAAoB,KAAKP,KAAL,CAAWQ,OAArC;AACA,UAAM;AAAEX,MAAAA;AAAF,QAAa,KAAKD,KAAxB;AAEA,QAAIa,YAAJ;;AAEA,UAAMC,cAAc,GAAG,CAACb,MAAD,EAASU,aAAT,KAA2B;AAChD,UAAIA,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,YAAId,MAAM,CAACe,eAAX,EAA4B;AAC1B,iBACE;AAAK,YAAA,SAAS,EAAC,gCAAf;AAAgD,YAAA,IAAI,EAAC,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGf,MAAM,CAACe,eADV,CADF;AAKD,SAND,MAMO;AACL,iBACE;AAAK,YAAA,SAAS,EAAC,8BAAf;AAA8C,YAAA,IAAI,EAAC,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CADF;AAKD;AACF,OAdD,MAcO;AACL,eAAO,oBAAC,OAAD;AAAS,UAAA,kBAAkB,EAAEL,aAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF,KAlBD;;AAoBAE,IAAAA,YAAY,GAAGC,cAAc,CAACb,MAAD,EAASU,aAAT,CAA7B;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAG,mBAAkBR,EAAG,EAAhC;AAAmC,MAAA,SAAS,EAAC,sBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,oBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAMGU,YANH,CADF;AAUD;;AA3DgC;;AA8DnCf,YAAY,CAACmB,SAAb,GAAyB;AACvBL,EAAAA,OAAO,EAAEhB,SAAS,CAACsB,MAAV,CAAiBC,UADH;AAEvBtB,EAAAA,UAAU,EAAED,SAAS,CAACwB,IAAV,CAAeD,UAFJ;AAGvBlB,EAAAA,MAAM,EAAEL,SAAS,CAACsB,MAAV,CAAiBC;AAHF,CAAzB;;AAMA,MAAME,eAAe,GAAGrB,KAAK,KAAK;AAChCY,EAAAA,OAAO,EAAEZ,KAAK,CAACY,OADiB;AAEhCX,EAAAA,MAAM,EAAED,KAAK,CAACC;AAFkB,CAAL,CAA7B;;AAKA,eAAeN,OAAO,CACpB0B,eADoB,EAEpB;AAAExB,EAAAA;AAAF,CAFoB,CAAP,CAGbC,YAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport Backlog from './Backlog';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport { getBacklog } from \"../../actions/backlogAction\"\n\nclass ProjectBoard extends Component {\n    //constructor to handle errors\n    constructor() {\n      super();\n      this.state = {\n        errors: {}\n      };\n    }\n  \n    componentDidMount() {\n      const { id } = this.props.match.params;\n      this.props.getBacklog(id);\n    }\n  \n    componentWillReceiveProps(nextProps) {\n      if (nextProps.errors) {\n        this.setState({ errors: nextProps.errors });\n      }\n    }\n  \n    render() {\n      const { id } = this.props.match.params;\n      const { project_tasks } = this.props.backlog;\n      const { errors } = this.state;\n  \n      let BoardContent;\n  \n      const boardAlgorithm = (errors, project_tasks) => {\n        if (project_tasks.length < 1) {\n          if (errors.projectNotFound) {\n            return (\n              <div className=\"alert alert-danger text-center\" role=\"alert\">\n                {errors.projectNotFound}\n              </div>\n            );\n          } else {\n            return (\n              <div className=\"alert alert-info text-center\" role=\"alert\">\n                No Project Tasks on this board\n              </div>\n            );\n          }\n        } else {\n          return <Backlog project_tasks_prop={project_tasks} />;\n        }\n      };\n  \n      BoardContent = boardAlgorithm(errors, project_tasks);\n  \n      return (\n        <div className=\"container\">\n          <Link to={`/addProjectTask/${id}`} className=\"btn btn-primary mb-3\">\n            <i className=\"fas fa-plus-circle\"> Create Project Task</i>\n          </Link>\n          <br />\n          <hr />\n          {BoardContent}\n        </div>\n      );\n    }\n  }\n  \n  ProjectBoard.propTypes = {\n    backlog: PropTypes.object.isRequired,\n    getBacklog: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n  };\n  \n  const mapStateToProps = state => ({\n    backlog: state.backlog,\n    errors: state.errors\n  });\n  \n  export default connect(\n    mapStateToProps,\n    { getBacklog }\n  )(ProjectBoard);"]},"metadata":{},"sourceType":"module"}